version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: english-app-db
    restart: always
    environment:
      POSTGRES_DB: english_learning_app
      POSTGRES_USER: dev_user
      POSTGRES_PASSWORD: dev_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - english-app-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: english-app-redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - english-app-network

  # Backend API Server
  api:
    build: 
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: english-app-api
    restart: always
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=english_learning_app
      - DB_USER=dev_user
      - DB_PASSWORD=dev_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=dev_jwt_secret_key_change_in_production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - english-app-network

  # AI Analysis Service (Python)
  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile.dev
    container_name: english-app-ai
    restart: always
    environment:
      - PYTHON_ENV=development
      - API_PORT=8000
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "8000:8000"
    volumes:
      - ./ai-service:/app
      - ai_models:/app/models
    depends_on:
      - redis
    networks:
      - english-app-network

volumes:
  postgres_data:
  redis_data:
  ai_models:

networks:
  english-app-network:
    driver: bridge